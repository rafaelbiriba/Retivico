package {	import flash.external.*;	import flash.utils.*;	import flash.text.*;			//Graphics Imports	import flash.display.LoaderInfo;	import flash.display.MovieClip;	import flash.display.Sprite;	import fl.controls.Button;	import fl.controls.TextArea;	import flash.media.Video;	import flash.media.Camera;	import flash.media.Sound;	import flash.media.Microphone;	import fl.transitions.Tween;	import fl.transitions.easing.*;	//import fl.transitions.TweenEvent;		//Network Imports	import flash.net.NetConnection;	import flash.net.NetStream;	import flash.net.Responder;		//Events Imports	import flash.events.*;				public class Retivico extends MovieClip {		//Variable declarations		public var nc:NetConnection;		public var ns:NetStream;		public var nsPlay:NetStream;		public var recordBtn:Button;		public var stopBtn:Button;		public var playBtn:Button;		public var tryAgainBtn:Button;		public var cam:Camera = Camera.getCamera();		public var pointer:MovieClip;		public var videoWindow:Video;		public var logField:TextArea;		public var bandwidthValue:TextField;		public var isRecording:Boolean = false;		public var mic:Microphone;		public var sound:Sound;		public var videoName:String;		public var bandwidth:Number;				public var msgBackground:MovieClip;		public var msgField:TextField;				public var coeficiente:Number = 0;		public var maxBandwidth:Number = 0;				public var checkBandwidthInterval:uint;		public var medidorBandaInterval:uint;				public function logger(mensagem:String):void{			  logField.appendText(mensagem+"\n");			  logField.verticalScrollPosition = logField.maxVerticalScrollPosition;		}	//#############################// Buttons functions //#############################//				public function recordClick(event:MouseEvent):void{			logger ("Record !");			mic = Microphone.getMicrophone();			ns.attachAudio( mic );			ns.publish( getUniqueStreamName(), "record" );			isRecording = true;			recordBtn.enabled = false;			stopBtn.enabled = true;			tryAgainBtn.visible = false;		}				public function stopClick(event:MouseEvent):void{			if(isRecording){				isRecording = false;				stopBtn.enabled = false;				playBtn.enabled = true;				tryAgainBtn.visible = true;				tryAgainBtn.enabled = true;				logger ("Stop !");				ns.close();				ns.attachAudio( null );					ns = null;				ns = new NetStream( nc ); 				ns.attachCamera( cam );				stopBandwidthCheck();			}		}				public function disableAllButtons():void{			recordBtn.enabled = false;			playBtn.enabled = false;			stopBtn.enabled = false;			tryAgainBtn.enabled = false;		}		public function hideAllButtons():void{			recordBtn.visible = false;			playBtn.visible = false;			stopBtn.visible = false;			tryAgainBtn.visible = false;		}				public function showAllButtons():void{			recordBtn.visible = true;			playBtn.visible = true;			stopBtn.visible = true;			tryAgainBtn.visible = true;		}				public function setAllButtonsEvents():void{			recordBtn.addEventListener(MouseEvent.CLICK, recordClick);			stopBtn.addEventListener(MouseEvent.CLICK, stopClick);			playBtn.addEventListener(MouseEvent.CLICK, playClick);			tryAgainBtn.addEventListener(MouseEvent.CLICK, tryAgainClick);		}				public function playClick(event:MouseEvent):void{			logger ("Play !");			tryAgainBtn.visible = true;			tryAgainBtn.enabled = true;			nsPlay = new NetStream( nc );			var customClient:Object = new Object();			ns.client = customClient;			customClient.onMetaData = metaDataHandler;			videoWindow.attachNetStream(nsPlay);			nsPlay.play(videoName);		}				public function tryAgainClick(event:MouseEvent):void{			showMsgScreenAndStopAll("Reiniciando a aplicação... ");			setTimeout(function(){				prepareButtons();				createNetConnection();			}, 1000);		}				public function prepareButtons():void {			showAllButtons();			setAllButtonsEvents();			setTimeout(function(){					disableAllButtons();					tryAgainBtn.visible = true;					tryAgainBtn.enabled = true;			}, 1000);		}			public function prepareButtonsForRecord():void {			tryAgainBtn.visible = false;			recordBtn.enabled = true;		}		//#############################// Screen Msgs functions //#############################//		public function hideMsgScreen():void{			msgBackground.visible = false;			msgField.visible = false;			showAllButtons();		}		public function showMsgScreenAndStopAll(msg:String):void{			showMsgScreen(msg);			stopBandwidthCheck();						tryAgainBtn.visible = true;			tryAgainBtn.enabled = true;		}				public function showMsgScreen(msg:String):void{			msgBackground.visible = true;			msgField.text = msg;			msgField.visible = true;			hideAllButtons();		}	//#############################// Bandwidth functions //#############################//			public function regulaCam():void{			cam.setQuality( bandwidth, 0);			logger("Regulando CAM !");			logger("New bandwidth CAM: " + cam.bandwidth +" bytes");		}				public function checkBandwidth():void{			logger("Calling bandwidth detection and setting deamon...");			bandwidthValue.text = String(maxBandwidth)+" kbps";			checkBandwidthInterval = setInterval(nc.call, 3000, "checkBandwidth", null);			medidorBandaInterval = setInterval(medidorBanda, 6000);		}				public function stopBandwidthCheck():void{			resetMedidor();			clearInterval(checkBandwidthInterval);			clearInterval(medidorBandaInterval);		}				public function resetMedidor():void{			new Tween(pointer, "x", Strong.easeInOut, pointer.x, 0, 4, true);			bandwidth = 0;		}			public function medidorBanda():void{			var valor:Number = nc.client.getBanda();			//Pointer 0 - 252			var myTween:Tween;			if(valor >= maxBandwidth){				myTween = new Tween(pointer, "x", Strong.easeInOut, pointer.x, 252, 4, true);				bandwidth = Math.round(maxBandwidth*1024/8); //convert kbps in bits and then to bytes			}			else{				myTween = new Tween(pointer, "x", Strong.easeInOut, pointer.x, ((valor*252)/maxBandwidth), 4, true);				bandwidth = Math.round(valor*1024/8);					}			logger("Bandwidth: >> " + valor + " kbps | Maximo: >> "+maxBandwidth+" kbps");			regulaCam();		}			private function metaDataHandler(infoObject:Object):void {			//get video data rate from metadata to use for bw calculation			//var key:String;			//for (key in infoObject){				//if(key == "videodatarate") videoDataRate = infoObject[key];			//}		}	//#############################// Remote FMS functions //#############################//			public function createNetConnection():void{			nc = new NetConnection();			nc.addEventListener(NetStatusEvent.NET_STATUS, networkStatusHandler);			nc.connect( "rtmp://server.localhost/retivico" ); //Remote Flash Media Server			logger(" NC Connect sended !");		}				public function getMaxBandwidthFromServer():void{			nc.call("maxBandwidth", new Responder(function(result){ 				logger("MaxBandwidth: "+result); 				maxBandwidth = parseInt(result);				startCamera();			}));			}				public function getCoeficienteFromServer():void{			nc.call("coeficiente", new Responder(function(result){				logger("Coeficiente: "+result); 				coeficiente = parseInt(result);				startCamera();			}));			}				public function getConfigurationsFromServer():void{			getMaxBandwidthFromServer();			getCoeficienteFromServer();		}//#############################// Retivico functions //#############################//		public function startCamera():void{			if(coeficiente==0 || maxBandwidth==0 ){				logger("Error: Basic settings is blank...");				return;			}			nc.client = new Client(coeficiente);			checkBandwidth();			ns = new NetStream( nc );			ns.attachCamera( cam );			if(cam==null){				showMsgScreenAndStopAll("A camera não foi encontrada ou não pode ser inicializada...")			}			else{				cam.setQuality( 32000, 0);				cam.setLoopback( true );				logger("Setting camera...");				videoWindow.attachCamera( cam );				videoWindow.smoothing = true;				logger("Width: " + cam.width + " -- Height: " + cam.height + " ----- Quality: " + cam.quality + " ----- FPS: " + cam.fps + " ----- current FPS: " + cam.currentFPS + " ------ bandwidth: " + cam.bandwidth);				showMsgScreen("Iniciando a aplicação...");				var waitForBandwidth:uint = setInterval(function(){ 					if(bandwidth > 0 ) { hideMsgScreen(); prepareButtonsForRecord(); clearInterval(waitForBandwidth); }				}, 1000);			}			}		function Retivico() {			showMsgScreen("Conectando ao servidor...");			sound = new Sound();			logField.visible = true;			prepareButtons();			createNetConnection();		}		//#############################// Network events functions //#############################//			private function networkStatusHandler(event:NetStatusEvent):void {			switch (event.info.code) {				case "NetConnection.Connect.Success":					if(event.target == nc){						hideMsgScreen();						getConfigurationsFromServer();						logger(event.info.code);					}					else{						showMsgScreenAndStopAll("Error:\n"+event.info.code);						logger(event.info.code);					}					break;						}		}	//#############################// Other functions //#############################//		function getUniqueStreamName():String {			var tempName:String = LoaderInfo(this.root.loaderInfo).parameters["filename"]			if(tempName!=null){				return tempName;			}			var myDate:Date = new Date();			videoName = "retivico_record";			videoName += "_" + myDate.getDate() + "-" + (myDate.getMonth() + 1) + "-" + myDate.getFullYear();			videoName += "_" + myDate.getHours() + "-" + myDate.getMinutes() + "-" + myDate.getSeconds() + "-" + myDate.getMilliseconds();			return videoName;		}	} // close class Retivico} // close class package